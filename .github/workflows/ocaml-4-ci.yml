# In this workflow we test the build for a subset of the packages of the repo
# that are compatible with OCaml 4.14.

name: ocaml-4-ci

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - "**" # This will match pull requests targeting any branch

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
        ocaml-compiler:
          - 4.14.x

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup OCaml
        uses: ocaml/setup-ocaml@v3
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}
          opam-repositories: |
            default: https://github.com/ocaml/opam-repository.git
            mbarbin: https://github.com/mbarbin/opam-repository.git
      #     janestreet-bleeding: https://github.com/janestreet/opam-repository.git
      #     janestreet-bleeding-external: https://github.com/janestreet/opam-repository.git#external-packages

      # This construct is not well supported by older OCaml versions. Given that
      # we already check the build with this option in the main CI job, we
      # disable it here unconditionally for simplicity.
      - name: Edit dune-project
        shell: pwsh
        run: |
          (Get-Content dune-project) -notmatch '\(implicit_transitive_deps false\)' | Set-Content dune-project

      # We build and run tests for a subset of packages. More tests are run in
      # the development workflow and as part of the main CI job. These are the
      # tests that are checked for every combination of os and ocaml-compiler.
      - name: Install dependencies
        run: opam install ./vcs.opam ./vcs-git-backend.opam ./vcs-git-unix.opam --deps-only --with-test

      - name: Build & Run tests
        run: opam exec -- dune build @all @runtest -p vcs,vcs-git-backend,vcs-git-unix
