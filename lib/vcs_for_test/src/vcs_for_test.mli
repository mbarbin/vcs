(*_******************************************************************************)
(*_  Vcs - a versatile OCaml library for Git interaction                        *)
(*_  Copyright (C) 2024 Mathieu Barbin <mathieu.barbin@gmail.com>               *)
(*_                                                                             *)
(*_  This file is part of Vcs.                                                  *)
(*_                                                                             *)
(*_  Vcs is free software; you can redistribute it and/or modify it under       *)
(*_  the terms of the GNU Lesser General Public License as published by the     *)
(*_  Free Software Foundation either version 3 of the License, or any later     *)
(*_  version, with the LGPL-3.0 Linking Exception.                              *)
(*_                                                                             *)
(*_  Vcs is distributed in the hope that it will be useful, but WITHOUT ANY     *)
(*_  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  *)
(*_  FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License and    *)
(*_  the file `NOTICE.md` at the root of this repository for more details.      *)
(*_                                                                             *)
(*_  You should have received a copy of the GNU Lesser General Public License   *)
(*_  and the LGPL-3.0 Linking Exception along with this library. If not, see    *)
(*_  <http://www.gnu.org/licenses/> and <https://spdx.org>, respectively.       *)
(*_******************************************************************************)

(** Making it easier to use a vcs backend in tests.

    This will take care of handling some issues that are common to backends, such
    as the fact that the revisions generated by commits are not deterministic. *)

type t

val create : unit -> t
val mock_revs : t -> Vcs.Mock_revs.t

val commit
  :  t
  -> vcs:[> Vcs.Trait.branch | Vcs.Trait.commit | Vcs.Trait.rev_parse ] Vcs.t
  -> repo_root:Vcs.Repo_root.t
  -> commit_message:Vcs.Commit_message.t
  -> Vcs.Rev.t Or_error.t

val init
  :  t
  -> vcs:[> Vcs.Trait.config | Vcs.Trait.init ] Vcs.t
  -> path:Absolute_path.t
  -> Vcs.Repo_root.t Or_error.t

val rev_parse
  :  t
  -> vcs:[> Vcs.Trait.rev_parse ] Vcs.t
  -> repo_root:Vcs.Repo_root.t
  -> arg:Vcs.Rev_parse.Arg.t
  -> Vcs.Rev.t Or_error.t

val show_file_at_rev
  :  t
  -> vcs:[> Vcs.Trait.show ] Vcs.t
  -> repo_root:Vcs.Repo_root.t
  -> rev:Vcs.Rev.t
  -> path:Vcs.Path_in_repo.t
  -> [ `Present of Vcs.File_contents.t | `Absent ] Or_error.t
